{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","Generator","React","Component","props","state","quote","tf","then","model","seq2word","swap","token_data","generate_quote","bind","dict","ret","key","pred_dist","pred_token","char","model_input","text","i","this","predict","arraySync","push","join","setState","className","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mvBAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBCCAC,GATcC,IAAMC,U,kDAWxB,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAEDC,MAAQ,CAACC,MAAO,yCAErBC,IAAmB,6FAA6FC,MACtG,SAAAC,GAAW,EAAKA,MAAQA,KAGlC,EAAKC,SAAW,EAAKC,KAAKC,GAE1B,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBAXN,E,iDAabC,GACH,IAAIC,EAAM,GACV,IAAI,IAAIC,KAAOF,EACbC,EAAID,EAAKE,IAAQA,EAEnB,OAAOD,I,uCAWP,IARA,IAGIE,EACAC,EACAC,EALAC,EAAcd,IAAc,CAAC,IAAK,GAClCe,EAAO,GAOFC,EAAI,EAAGA,EAAI,MAClBL,EAAYM,KAAKf,MAAMgB,QAAQJ,GAE/BH,EAAYX,IAAWW,EAAW,GAElCC,EAAaZ,IAAeW,EAAW,GAAGQ,YAAY,GAGtDL,EAAcd,IAAcY,EAAY,GAExCC,EAAOI,KAAKd,SAASS,EAAW,IAChCG,EAAKK,KAAKP,GAEG,MAATA,GAboBG,KAmB1BD,EAAOA,EAAKM,KAAK,IACjBJ,KAAKK,UAAS,SAAAxB,GAAK,MAAK,CAACC,MAAOgB,Q,+BAGhC,OACE,6BACE,yBAAKQ,UAAU,WAAYN,KAAKnB,MAAMC,Y,GAxDtBJ,IAAMC,YA+DXD,IAAMC,UDiDnB,kBAAmB4B,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2405c6ba.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport * as tf from '@tensorflow/tfjs'\n\nimport token_data from \"./assets/tokens.json\"\n\n\nclass Title extends React.Component {\n  componentDidMount(){\n    document.title = \"funnyquotes\"\n  }\n  render(){\n    return null\n  }\n}\n\nclass Generator extends React.Component {\n  \n  constructor(props){\n    super(props)\n\n    this.state = {quote: 'Click the button to generate a quote!'}\n\n    tf.loadLayersModel(\"https://raw.githubusercontent.com/WBelchman/my_quote_generator/master/js_model/model.json\").then(\n              model => { this.model = model}\n    )\n\n    this.seq2word = this.swap(token_data)\n\n    this.generate_quote = this.generate_quote.bind(this)\n  }\n  swap(dict){\n    var ret = {};\n    for(var key in dict){\n      ret[dict[key]] = key;\n    }\n    return ret;\n  }\n  generate_quote(){\n    let model_input = tf.expandDims([20], 0)\n    let text = []\n\n    let pred_dist\n    let pred_token\n    let char\n\n    \n    for (let i = 0; i < 1000; i++){\n      pred_dist = this.model.predict(model_input)\n      \n      pred_dist = tf.squeeze(pred_dist, 0)\n      //console.log(pred_dist.arraySync())\n      pred_token = tf.multinomial(pred_dist, 1).arraySync()[0]\n      //console.log(pred_token)\n      \n      model_input = tf.expandDims(pred_token, 0)\n\n      char = this.seq2word[pred_token[0]]\n      text.push(char)\n\n      if (char === '.'){\n        break\n      }\n      \n    }\n\n    text = text.join('')\n    this.setState(state => ({quote: text}))\n  }\n  render(){\n    return (\n      <div>\n        <div className='textbox'>{ this.state.quote }</div>\n        {/* <button onClick={ this.generate_quote }>Click Me</button> */}\n      </div>\n    )\n  }\n}\n\nclass Page extends React.Component {\n  render(){\n    return (\n      <div className=\"main\">\n        <h2>FunnyQuotes</h2>\n        <h4>Yeah we need a better title</h4>\n        <Generator/>\n      </div>\n    )\n  }\n}\n\n\n\n//ReactDOM.render(<Title/>, document.getElementById('root'))\n//ReactDOM.render(<Page/>, document.getElementById('root'))\nserviceWorker.unregister();\n"],"sourceRoot":""}